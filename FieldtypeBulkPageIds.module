<?php namespace ProcessWire;

class FieldtypeBulkPageIds extends FieldtypePage {

	public static function getModuleInfo() {
		return array(
			'title' => 'Bulk Page IDs',
			'summary' => 'A fieldtype for storing a large number of page IDs.',
			'version' => '0.1.2',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/FieldtypeBulkPageIds',
			'icon' => 'arrows-alt',
			'installs' => 'InputfieldBulkPageIds',
			'requires' => 'ProcessWire>=3.0.0, PHP>=5.4.0',
		);
	}

	public function init() {
		$this->addHookBefore('FieldtypeBulkPageIds::markupValue', $this, 'beforeMarkupValue');
	}

	/**
	 * Before FieldtypeBulkPageIds::markupValue
	 * To allow subfield columns in Lister/ListerPro
	 *
	 * @param HookEvent
	 */
	public function beforeMarkupValue(HookEvent $event) {
		/** @var Page $page */
		$page = $event->arguments(0);
		/** @var Field $field */
		$field = $event->arguments(1);
		$value = $event->arguments(2);
		$property = $event->arguments(3);

		if($property === 'count') {
			$event->replace = true;
			$event->return = count($value);
		}
	}

	public function getInputfield(Page $page, Field $field) {
		$inputfield = $this->wire()->modules->get('InputfieldBulkPageIds');
		return $inputfield;
	}

	public function ___wakeupValue(Page $page, Field $field, $value) {
		return $value;
	}

	public function ___formatValue(Page $page, Field $field, $value) {
		return $value;
	}

	public function getBlankValue(Page $page, Field $field) {
		return [];
	}

	public function ___sleepValue(Page $page, Field $field, $value) {
		return $value;
	}

	public function sanitizeValue(Page $page, Field $field, $value) {
		// This method should perhaps validate the IDs against the template_id setting
		// But for now the user is simply trusted to set valid page IDs to the field
		return (array) $value;
	}

	public function ___getConfigInputfields(Field $field) {
		$modules = $this->wire()->modules;
		$wrapper = $this->wire(new InputfieldWrapper());

		// Optional template for pages that will be stored in this field
		// Exists so that InputfieldSelector and Lister/ListerPro will show subfields
		/** @var InputfieldSelect $f */
		$f = $modules->get('InputfieldSelect');
		$f_name = 'template_id';
		$f->name = $f_name;
		$f->label = $this->_('Template');
		$f->description = $this->_('Optional: Select the template of pages that are allowed to have their ID stored in this field.');
		foreach($this->wire()->templates as $template) {
			$f->addOption($template->id, $template->name);
		}
		$f->icon = 'cube';
		$f->value = $field->$f_name;
		$wrapper->add($f);

		return $wrapper;
	}

	public function getModuleConfigInputfields(array $data) {
		return $this->wire(new InputfieldWrapper());
	}

}
